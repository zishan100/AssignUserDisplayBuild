{"version":3,"sources":["Component/card.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","media","height","Cards","_ref","id","image","first","last","email","classes","react_default","a","createElement","Card","key","className","variant","CardMedia","title","CardContent","Typography","gutterBottom","root","width","container","maxHeight","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","page","setPage","_React$useState3","_React$useState4","rowsPerPage","setRowsPerPage","_useState","_useState2","userlist","setUserlist","useEffect","axios","get","concat","then","response","data","catch","err","console","log","Container","maxWidth","AppBar","position","Paper","map","avatar","first_name","last_name","Component_card","TablePagination","rowsPerPageOptions","component","count","onChangePage","event","newPage","onChangeRowsPerPage","target","value","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.353909ec.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Typography,Card,CardActions,CardContent,Button,CardMedia,makeStyles} from '@material-ui/core/'\r\n\r\nimport './card.css';\r\n\r\nconst useStyles = makeStyles({\r\n  media: {\r\n    height: 140,\r\n  },\r\n});\r\n\r\nconst Cards = ({id,image, first, last, email }) => {\r\n    const classes = useStyles();\r\n     \r\n   \r\n    return (\r\n      <Card  key={id}  className='card-container' variant=\"outlined\">\r\n          <CardMedia\r\n          className={classes.media}\r\n          image={image}\r\n          title=\"Contemplative Reptile\"\r\n          />\r\n         <CardContent  >\r\n            <div className='contain-fullname' >\r\n               <Typography gutterBottom variant=\"h6\" >{first}</Typography>\r\n                <Typography gutterBottom variant=\"h6\" >{last} </Typography>\r\n              </div>\r\n              <Typography  variant=\"h6\" >\r\n              {email}       \r\n              </Typography>\r\n          </CardContent>\r\n       </Card>             \r\n   )\r\n}\r\n\r\n\r\nexport default Cards;\r\n\r\n","import React,{useState,useEffect} from \"react\";\n\nimport { AppBar, Paper, TablePagination, TableRow, Typography, Container} from '@material-ui/core/'\n\nimport Cards from './Component/card';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport \"./App.css\";\nimport axios from 'axios';\n\n\n\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\"\n  },\n  container: {\n    maxHeight: 640\n  },\n  media: {\n    height: 140,\n  },\n});\n\n\nconst App =()=> {\n   let classes = useStyles();\n   const [page, setPage] = React.useState(0);\n   const [rowsPerPage, setRowsPerPage] = React.useState(6);\n   \n    const [userlist,setUserlist]=useState([])\n  \n  useEffect(() => {\n         \n    axios.get(`https://reqres.in/api/users?page=${page+1}`)\n      .then(response => {\n        const {data:{data} } = response;\n        \n        setUserlist(data);\n         \n      }).catch(err => {\n        console.log(err);\n      });\n    }, [userlist]);\n         \n  \n  const handleChangePage = (event, newPage) => {\n   \n    setPage(newPage);\n  };\n   \n   const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };  \n    \n  // const SerachBySymbol = (e) => {\n  //   let search = e.target.value;\n  //   let newnse = nselist.filter(nse => {\n  //       return  nse.SYMBOL.includes(search.trim().toUpperCase())\n  //     })  \n             \n  //   Setsearchlist(newnse);\n      \n  // }  \n\n\n  return (\n    <div  className='main-container'>\n      <Container maxWidth='xl' >\n         <AppBar position='fixed' >\n           \n          <Typography variant=\"h5\" gutterBottom >\n             USER LIST\n           </Typography>      \n          \n        </AppBar>\n    <Paper className={classes.root}>\n       <div className='project-main' >\n        {\n         userlist ? userlist.map(({id,avatar,first_name,last_name,email}) =>\n           <Cards\n             key={id}\n             first={ first_name }\n             last={ last_name }\n             email={ email }\n             image={avatar}\n           />\n                \n        ) : null \n       }\n        \n      </div> \n     \n      \n          \n    </Paper> \n        <TablePagination\n        rowsPerPageOptions={[6,12]}\n        component=\"div\"\n        count={12}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      /> \n      </Container>\n    </div>\n    );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport  App  from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}